name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20.18.0
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Cache Prettier
        uses: actions/cache@v4
        with:
          path: node_modules/.cache/prettier/.prettier-cache
          key: prettier-cache-${{ runner.os }}-${{ hashFiles('**/package-lock.json', '.prettierrc*', 'prettier.config.*', '.prettierignore') }}
          restore-keys: |
            prettier-cache-${{ runner.os }}-

      - name: Cache ESLint
        uses: actions/cache@v4
        with:
          path: .eslintcache
          key: eslint-cache-${{ runner.os }}-${{ hashFiles('**/eslint.config.mjs', '**/package-lock.json') }}
          restore-keys: |
            eslint-cache-${{ runner.os }}-

      - name: Run code quality checks
        id: code-quality
        run: |
          set +e  # Don't exit on error

          # Run Prettier and ESLint in parallel for better performance
          echo "🎨 Checking code formatting with Prettier..."
          npm run prettier &
          PRETTIER_PID=$!

          echo "🔍 Running ESLint code quality checks..."
          npm run lint:ci &
          ESLINT_PID=$!

          # Wait for both processes and capture exit codes
          wait $PRETTIER_PID
          PRETTIER_EXIT_CODE=$?

          wait $ESLINT_PID
          ESLINT_EXIT_CODE=$?

          # Store exit codes for summary
          echo "prettier-exit-code=$PRETTIER_EXIT_CODE" >> $GITHUB_OUTPUT
          echo "eslint-exit-code=$ESLINT_EXIT_CODE" >> $GITHUB_OUTPUT

          # Handle Prettier results
          if [ $PRETTIER_EXIT_CODE -eq 0 ]; then
            echo "::notice title=Prettier::✅ Code formatting is correct"
          else
            echo "::error title=Prettier::❌ Code formatting issues found. Run 'npm run prettier:fix' locally to fix."
          fi

          # Handle ESLint results
          if [ $ESLINT_EXIT_CODE -eq 0 ]; then
            echo "::notice title=ESLint::✅ Code quality checks passed with no errors"
          elif [ $ESLINT_EXIT_CODE -eq 1 ]; then
            echo "::warning title=ESLint::⚠️ Code quality warnings found but CI continues"
          else
            echo "::error title=ESLint::❌ Critical code quality issues found"
          fi

          # Exit with failure if formatting issues or critical ESLint errors
          if [ $PRETTIER_EXIT_CODE -ne 0 ] || [ $ESLINT_EXIT_CODE -gt 1 ]; then
            exit 1
          fi

      - name: Type checking
        run: npm run check-types

      - name: Run unit tests
        run: npm test

      - name: Build application
        run: npm run build

      - name: Generate Code Quality Summary
        if: always()
        run: |
          echo "## 🔍 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Check | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-------|--------|---------|" >> $GITHUB_STEP_SUMMARY

          # Prettier status
          if [ "${{ steps.code-quality.outputs.prettier-exit-code }}" = "0" ]; then
            echo "| Prettier | ✅ Passed | Code formatting is consistent |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| Prettier | ❌ Failed | Code formatting issues found |" >> $GITHUB_STEP_SUMMARY
          fi

          # ESLint status
          if [ "${{ steps.code-quality.outputs.eslint-exit-code }}" = "0" ]; then
            echo "| ESLint | ✅ Passed | No code quality errors or warnings |" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ steps.code-quality.outputs.eslint-exit-code }}" = "1" ]; then
            echo "| ESLint | ⚠️ Warnings | Code quality warnings found but allowed |" >> $GITHUB_STEP_SUMMARY
          else
            echo "| ESLint | ❌ Failed | Critical code quality issues found |" >> $GITHUB_STEP_SUMMARY
          fi

          # Type checking status
          echo "| Type Check | ✅ Checked | TypeScript compilation verified |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ✅ Passed | All tests completed successfully |" >> $GITHUB_STEP_SUMMARY
          echo "| Build | ✅ Success | Application built successfully |" >> $GITHUB_STEP_SUMMARY

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 📊 Pipeline Performance & Tools" >> $GITHUB_STEP_SUMMARY
          echo "- **Prettier**: Handles CSS, JSON, HTML, Markdown formatting" >> $GITHUB_STEP_SUMMARY
          echo "- **ESLint**: Manages JS/TS code quality + formatting (with Prettier integration)" >> $GITHUB_STEP_SUMMARY
          echo "- **Caching**: Both Prettier and ESLint results cached for faster runs" >> $GITHUB_STEP_SUMMARY
          echo "- **Error Handling**: Formatting issues block deployment, warnings allowed" >> $GITHUB_STEP_SUMMARY
          echo "- **Clear Separation**: Formatting vs code quality concerns distinguished" >> $GITHUB_STEP_SUMMARY
